name: CI/CD Pipeline with Auto-Adding GitHub Secrets

on:
  push:
    branches:
      - master

jobs:
  check-env-secrets:
    name: Check and Add Missing Environment Variables
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Environment Variables from application.properties
        id: extract_vars
        run: |
          # Extract env variables inside ${...} in application.properties
          grep -oP '\$\{\K[A-Za-z_][A-Za-z0-9_]*(?=\})' whatsappclone/src/main/resources/application.properties | sort -u > env_variables.txt
          
          echo "Extracted environment variables:"
          cat env_variables.txt
          
          echo "env_vars=$(cat env_variables.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Get GitHub Secrets
        id: get_secrets
        run: |
          echo "Fetching GitHub repository secrets..."
          SECRETS_JSON='${{ toJson(secrets) }}'
          
          if [[ "$SECRETS_JSON" == "null" || -z "$SECRETS_JSON" ]]; then
            echo "::error:: No GitHub secrets found. Please ensure you have added at least one secret in your repository settings."
            exit 1
          fi
          
          echo "$SECRETS_JSON" | jq -r 'keys[]' > github_secrets.txt
          echo "Existing secrets:"
          cat github_secrets.txt

      - name: Compare Environment Variables and Secrets
        id: compare_secrets
        run: |
          echo "Checking for missing environment variables..."
          missing_vars=()
          
          for var in $(cat env_variables.txt); do
            if ! grep -q "^$var$" github_secrets.txt; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "❌ Missing environment variables in GitHub Secrets:"
            printf '%s\n' "${missing_vars[@]}"
            echo "missing_vars=$(IFS=,; echo "${missing_vars[*]}")" >> $GITHUB_ENV
          else
            echo "✅ All required environment variables are present."
          fi

      - name: Fetch GitHub Repository Public Key
        if: env.missing_vars != ''
        id: fetch_key
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          echo "Fetching repository public key..."
          response=$(curl -s -H "Authorization: token $GH_PAT" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/secrets/public-key")

          echo "$response" | jq .
          
          echo "$response" | jq -r '.key' > key.txt
          echo "$response" | jq -r '.key_id' > key_id.txt

          echo "key_id=$(cat key_id.txt)" >> $GITHUB_ENV

      - name: Add Missing Secrets to GitHub
        if: env.missing_vars != ''
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          echo "🛠 Encrypting and adding missing secrets to GitHub..."
          IFS=',' read -r -a missing_vars <<< "${{ env.missing_vars }}"
          
          for secret in "${missing_vars[@]}"; do
            echo "🔹 Encrypting secret: $secret"

            SECRET_VALUE="PLACEHOLDER_VALUE"
          
            # Encrypt the secret using GitHub's public key
            ENCRYPTED_VALUE=$(echo -n "$SECRET_VALUE" | openssl enc -e -aes-256-cbc -a -A -K "$(cat key.txt)" -iv 00000000000000000000000000000000)
          
            # Add the encrypted secret to GitHub
            curl -X PUT "https://api.github.com/repos/$REPO/actions/secrets/$secret" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $GH_PAT" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d "{\"encrypted_value\":\"$ENCRYPTED_VALUE\", \"key_id\":\"${{ env.key_id }}\"}"
          done

  build:
    name: Build and Deploy Application
    needs: check-env-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        working-directory: whatsappclone  # Set the correct directory
        run: mvn clean package -DskipTests  # Skip tests during build

      - name: Deploy Application (Modify this step)
        run: |
          echo "🚀 Deploying application..."
          # Add your deployment commands here (e.g., Docker, Kubernetes, SCP, etc.)
