name: Enhanced Spring Boot CI/CD

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  secret-management:
    name: Secret Synchronization
    runs-on: ubuntu-latest
    outputs:
      build_approved: ${{ steps.validate-secrets.outputs.ready }}
      missing_vars: ${{ steps.validate-secrets.outputs.missing_vars }}
    steps:
      - uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get remove -y gh || true
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "$GH_TOKEN" > token.txt
          gh auth login --with-token < token.txt
          rm token.txt
          gh auth status

      - name: Scan Spring Boot Properties
        id: scan-props
        run: |
          # Improved scanning with proper JSON output
          find whatsappclone/src -type f \( \
            -name "*.java" -o \
            -name "*.properties" -o \
            -name "*.yml" -o \
            -name "*.yaml" \
          \) -exec grep -Eho '\$\{[A-Z0-9_]+\}|@Value\("\\$\\{[A-Z0-9_]+\\}"' {} + | \
            grep -oE '[A-Z0-9_]+' | \
            sort -u | jq -R -s 'split("\n")[:-1]' > env_vars.json
          
          echo "Found Spring properties:"
          cat env_vars.json
          
          # Set output using proper JSON format
          echo "env_vars=$(cat env_vars.json)" >> $GITHUB_OUTPUT

      - name: Validate Secrets
        id: validate-secrets
        run: |
          # Read environment variables from previous step
          echo "${{ steps.scan-props.outputs.env_vars }}" > env_vars.json
          jq -r '.[]' env_vars.json > env_vars.txt
          
          # Get current secrets
          gh secret list --json name | jq -r '.[].name' > secrets.txt
          
          # Find missing secrets
          comm -23 env_vars.txt secrets.txt > missing.txt || true
          missing_count=$(wc -l < missing.txt | tr -d ' ')
          
          if [ "$missing_count" -gt 0 ]; then
            echo "Adding $missing_count secrets..."
            while IFS= read -r var; do
              # Try to get value from .env files first
              val=$(grep -m1 "^$var=" whatsappclone/src/main/resources/*.env* 2>/dev/null | cut -d '=' -f2- || \
                    echo "PLACEHOLDER_$(openssl rand -hex 8)")
          
              if ! gh secret set "$var" --body "$val"; then
                echo "::error::Failed to add secret $var"
                exit 1
              fi
              echo "Added $var"
            done < missing.txt
          
            echo "::warning::New secrets added. Update placeholders in repo settings."
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "missing_vars=$(paste -sd, missing.txt)" >> $GITHUB_OUTPUT
          else
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "missing_vars=none" >> $GITHUB_OUTPUT
          fi

      - name: Notify Slack
        if: steps.validate-secrets.outputs.ready == 'false'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "⚠️ New Secrets Added to ${{ github.repository }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Action Required:* Update these placeholder secrets in GitHub:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "`${{ steps.validate-secrets.outputs.missing_vars }}`"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Update Secrets"
                      },
                      "url": "https://github.com/${{ github.repository }}/settings/secrets/actions"
                    }
                  ]
                }
              ]
            }

  build-and-deploy:
    name: Build & Deploy
    needs: secret-management
    if: needs.secret-management.outputs.build_approved == 'true'
    runs-on: ubuntu-latest
    env:
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            whatsappclone/target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build with Maven
        working-directory: whatsappclone
        run: mvn clean package -DskipTests

      - name: Verify JAR
        run: |
          java -jar whatsappclone/target/*.jar --spring.profiles.active=ci &
          APP_PID=$!
          sleep 30
          curl -s http://localhost:8080/actuator/health | grep -q '"status":"UP"' || { echo "::error::Application failed to start"; kill $APP_PID; exit 1; }
          kill $APP_PID

      - name: Docker Build & Push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          cd whatsappclone
          docker build -t whatsapp-clone:${{ github.sha }} .
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker tag whatsapp-clone:${{ github.sha }} your-registry/whatsapp-clone:${{ github.sha }}
          docker push your-registry/whatsapp-clone:${{ github.sha }}

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          namespace: default
          manifests: whatsappclone/deployments/*.yaml
          images: your-registry/whatsapp-clone:${{ github.sha }}
          kubectl-version: latest