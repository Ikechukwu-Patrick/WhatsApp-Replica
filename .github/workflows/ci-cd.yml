name: Enhanced Spring Boot CI/CD

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  secret-management:
    name: Secret Synchronization
    runs-on: ubuntu-latest
    outputs:
      build_approved: ${{ steps.validate-secrets.outputs.ready }}
      missing_vars: ${{ steps.validate-secrets.outputs.missing_vars }}
    steps:
      - uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get remove -y gh || true
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh

      - name: Authenticate GitHub CLI
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          echo "$GH_PAT" | gh auth login --with-token
          gh auth status

      - name: Scan Spring Boot Properties
        id: scan-props
        run: |
          echo "üîç Scanning for environment variables..."
          find whatsappclone/src -type f \( \
            -name "*.java" -o \
            -name "*.properties" -o \
            -name "*.yml" -o \
            -name "*.yaml" \
          \) -exec grep -Eho '\$\{[A-Z0-9_]+\}|@Value\("\\$\\{[A-Z0-9_]+\\}"' {} + | \
            grep -oE '[A-Z0-9_]+' | \
            sort -u | jq -R -s -c 'split("\n")[:-1]' > env_vars.json
          
          echo "üìÇ Extracted environment variables:"
          cat env_vars.json
          
          echo "env_vars=$(cat env_vars.json)" >> $GITHUB_ENV

      - name: Validate Secrets
        id: validate-secrets
        run: |
          echo "üîé Validating secrets..."
          echo "${{ env.env_vars }}" | jq -r '.[]' > env_vars.txt
          
          # Get existing secrets
          gh secret list --json name | jq -r '.[].name' > secrets.txt
          
          # Find missing secrets
          grep -vxFf secrets.txt env_vars.txt > missing.txt || true
          missing_count=$(wc -l < missing.txt | tr -d ' ')
          
          if [ "$missing_count" -gt 0 ]; then
            echo "‚ö†Ô∏è Missing secrets found: $missing_count"
            cat missing.txt
            echo "ready=false" >> $GITHUB_ENV
            echo "missing_vars=$(tr '\n' ',' < missing.txt | sed 's/,$//')" >> $GITHUB_ENV
          else
            echo "‚úÖ All required secrets are present."
            echo "ready=true" >> $GITHUB_ENV
            echo "missing_vars=none" >> $GITHUB_ENV
          fi

      - name: Auto-Add Missing Secrets
        if: env.ready == 'false'
        run: |
          echo "‚öôÔ∏è Adding missing secrets..."
          while IFS= read -r var; do
            value="PLACEHOLDER_$(openssl rand -hex 8)"  # Generates a random placeholder value
            if gh secret set "$var" --body "$value"; then
              echo "‚úÖ Added $var"
            else
              echo "::error:: Failed to add secret $var"
              exit 1
            fi
          done < missing.txt

      - name: Show Notification in GitHub Actions UI
        if: env.ready == 'false'
        run: |
          echo "### üö® New Secrets Added to GitHub üö®" >> $GITHUB_STEP_SUMMARY
          echo "The following secrets were automatically added:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          while IFS= read -r secret; do
            echo "- \`$secret\`" >> $GITHUB_STEP_SUMMARY
          done < missing.txt
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **[Click here to update your secrets](https://github.com/${{ github.repository }}/settings/secrets/actions)**" >> $GITHUB_STEP_SUMMARY

  build-and-deploy:
    name: Build & Deploy
    needs: secret-management
    if: needs.secret-management.outputs.build_approved == 'true'
    runs-on: ubuntu-latest
    env:
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2
            whatsappclone/target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Build with Maven
        working-directory: whatsappclone
        run: mvn clean package -DskipTests

      - name: Verify JAR
        run: |
          java -jar whatsappclone/target/*.jar --spring.profiles.active=ci &
          APP_PID=$!
          timeout 60 bash -c 'while ! curl -s http://localhost:8080/actuator/health | grep -q '"'"'"status":"UP"'"'"'; do sleep 2; done' || \
            { echo "::error::Application failed to start"; kill $APP_PID; exit 1; }
          curl -s http://localhost:8080/actuator/health | jq .
          kill $APP_PID
