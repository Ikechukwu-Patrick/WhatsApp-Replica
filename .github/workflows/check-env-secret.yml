name: Auto-Add Missing Environment Variables to GitHub Secrets

on:
  push:
    branches:
      - master

jobs:
  check-env-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Environment Variables from application.properties
        id: extract_vars
        run: |
          grep -oP '\$\{\K[A-Za-z_][A-Za-z0-9_]*(?=\})' whatsappclone/src/main/resources/application.properties | sort -u > env_variables.txt
          
          echo "Extracted environment variables:"
          cat env_variables.txt
          
          echo "env_vars=$(cat env_variables.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Get GitHub Secrets
        id: get_secrets
        run: |
          echo "Fetching GitHub repository secrets..."
          SECRETS_JSON='${{ toJson(secrets) }}'
          
          if [[ "$SECRETS_JSON" == "null" || -z "$SECRETS_JSON" ]]; then
            echo "::error:: No GitHub secrets found. Please ensure you have added at least one secret in your repository settings."
            exit 1
          fi
          
          echo "$SECRETS_JSON" | jq -r 'keys[]' > github_secrets.txt
          echo "Existing secrets:"
          cat github_secrets.txt

      - name: Compare Environment Variables and Secrets
        id: compare_secrets
        run: |
          echo "Checking for missing environment variables..."
          missing_vars=()
          
          for var in $(cat env_variables.txt); do
            if ! grep -q "^$var$" github_secrets.txt; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "❌ Missing environment variables in GitHub Secrets:"
            printf '%s\n' "${missing_vars[@]}"
            echo "missing_vars=$(IFS=,; echo "${missing_vars[*]}")" >> $GITHUB_ENV
          else
            echo "✅ All required environment variables are present."
          fi

      - name: Fetch GitHub Repository Public Key
        if: env.missing_vars != ''
        id: fetch_key
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          echo "Fetching repository public key..."
          response=$(curl -s -H "Authorization: token $GH_PAT" -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/$REPO/actions/secrets/public-key")

          echo "$response" | jq .

          # Validate response
          key=$(echo "$response" | jq -r '.key')
          key_id=$(echo "$response" | jq -r '.key_id')

          if [[ -z "$key" || "$key" == "null" ]]; then
            echo "::error:: Failed to fetch GitHub repository public key."
            exit 1
          fi

          echo "$key" > key.txt
          echo "$key_id" > key_id.txt

          echo "key_id=$(cat key_id.txt)" >> $GITHUB_ENV

      - name: Install Sodium Library for Encryption
        if: env.missing_vars != ''
        run: |
          sudo apt-get install libsodium-dev -y
          pip install pynacl  # Python library for encryption

      - name: Encrypt and Add Missing Secrets to GitHub
        if: env.missing_vars != ''
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          REPO: ${{ github.repository }}
        run: |
          echo "🛠 Encrypting and adding missing secrets to GitHub..."
          python3 - <<EOF
  import base64
  import nacl.encoding
  import nacl.public
  import os
  import requests

# Load public key and key_id
with open("key.txt", "r") as f:
  public_key = f.read().strip()
with open("key_id.txt", "r") as f:
  key_id = f.read().strip()

# Ensure public key is valid
if not public_key or public_key == "null":
  print("❌ ERROR: Public key is invalid or missing!")
  exit(1)

# Convert public key to bytes
try:
  public_key = nacl.public.PublicKey(base64.b64decode(public_key), encoder=nacl.encoding.RawEncoder)
except Exception as e:
  print(f"❌ ERROR: Failed to decode public key - {str(e)}")
  exit(1)

# Encrypt function
def encrypt_secret(secret_value):
  sealed_box = nacl.public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return base64.b64encode(encrypted).decode("utf-8")

# Get missing secrets
  missing_vars = os.environ["missing_vars"].split(",")
  
  # GitHub API headers
  headers = {
"Authorization": f"token {os.environ['GH_PAT']}",
"Accept": "application/vnd.github+json",
"X-GitHub-Api-Version": "2022-11-28"
}

# Repository name
  repo = os.environ["REPO"]

# Add secrets
for secret in missing_vars:
  secret_value = f"auto_generated_value_for_{secret}"  # Replace this with actual logic
  encrypted_value = encrypt_secret(secret_value)
  
  url = f"https://api.github.com/repos/{repo}/actions/secrets/{secret}"
  data = {"encrypted_value": encrypted_value, "key_id": key_id}

  response = requests.put(url, headers=headers, json=data)

  if response.status_code in [201, 204]:
    print(f"✅ Successfully added secret: {secret}")
    else:
        print(f"❌ Failed to add secret: {secret}")
    print(response.json())
  EOF
